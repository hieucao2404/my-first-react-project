I. Component
    - React applications are entirely made out of compenents
    - Buildding blocks of user interface in React
    - Piece of UI that has it own data, login and appearance (how it works and looks)
    - Build complex by building multiple components and combining them
    - Components can be reused, nested inside each other and pass data between

    --> How to breaks design into compents
    Component Tree:
    App - Video Player
    	- Menu
    	- Refine Questions(Parent compnent) - Filter (Child component)
    	- Questions List - Question
    					 - Question
    					 - Question

    Component
    - Only return exacly one element
    - Nested does not means write the function in another, but include components
    - In realword we divide code in to module
    - We can call each component multiple times to reuse it  

II. WHAT is JSX ????
	- An extension of JS
	- Component contains data, logic, appearence
	- Declaratice syntax to describe what components look like and how they word
	- Components must return a block of JSX
	- Extension of JS that allow us to embed JS CSS and React components into HTML 
	- Each JSX elements is converted to a React.createElement function
	- We could use React without JSX but does not effective and hard to understand

	JSX is DECALREATIVE!!
	- IMPERATIVE: (How to do things)
		- Manaue DOM element selections and DOM traversing
		- Step-by-step DOM mutaions until we reach the desired UI
	- DECLARATIVE: (What you wants)
		- Describe what UI should look like using JSX, based on current data
		- No DOM manipulation
		- React is an abstraction away from DOM: we never touch the DOM
		- Instead, we think of the UI has a reflection of the current data

III. Seperation of Concern!
	1. Rise of interactive SPAs
		- One technology per file (traditional)
	2. JS is in charge of HTML
		- HTML does not make sense without JS
	3. Logic and UI are tightly coupled
	4. Why keep them seperated
	5. React Component + JSX

	Component includes - Data
					   - Logic
					   - Appearance
	All in 1 file

	In React we have one component per file (React sepetration of concern)
	- Each component is concerned with one piece of the UI 

IV. PROPS
	1. 
	- Props is how we pass data from parent to children component (down the component tree)
	- Essential tool to configure and customize components(like function parameters)
	- With props, parent componets control how child components look and work
	- Anything can be passed as props: single values, arrays, objects, functions, even other components

	2. PROPS ARE READ-ONLY
	Data in component inlude 
	- Props: is data coming from the outside and can only be updated by the parent component. Immutable.
		+ Mutate props would affect parent, creating side effects(not pure)
		+ Component have to be pure functions interms of props and state
		+ This allow React to optimize apps, avoid bugs, make apps predictable
	- State: State is internal data that can be updated by the component's logic

	3. ONE-WAY DATA FLOW
	- In react, data can only be passed from parent to children by using props (can not be other way around)
	Why?:
	- Make applications more predictable and easier to understand
	- Make applications easier to de bug, as we have more control over the data
	- Applications is more performant

V. Rules of JSX
	1. General Ruls
	- JSX works essentially like HTML, but we can enter "JS mode" by using {} (for text or attributes)
	- We can place JS expressions inside {}. Example: reference variables, create arrays or objects,[].map(). termary operator
	- Statement are not allowed(if/else, for, switch)
	- JSX produces a JS expression
		+ We can place other pieces of JSX inside{}
		+ We can write JSX anywhere inside a component (in if/else, assign to variables, pass it into functions)
	- A piece of JSX can only have one root element. If you need more, use <React.Fragment> (or the short <>)

VI. Rendering Lists
	1. Means
	-  When we have an arrays and want to create a component for each element of an array